const { join } = require('path')
const { readProject } = require('../../projectReader')
const { merge } = require('../../merge')
const { srv4, html5RepoHost, html5Runtime, appDeployer, approuter, mtxSidecar4 } = require('../../registries/mta')
const { odataApi } = require('../../registries/xs-app')

module.exports = class Html5RepoTemplate extends require('../../plugin') {

    requires() {
        const { hasHelm, hasHelmUnifiedRuntime } = readProject()
        if (hasHelm || hasHelmUnifiedRuntime) return ['destination']
    }

    static help() {
        return 'SAP BTP HTML5 Application Repository'
    }

    static hasInProduction(env) {
        return !!env.requires['html5-repo']
    }

    async run() {
        const project = readProject()
        const { appUIPaths, apps, appPath, configFile, hasUI5 } = project
        await merge(__dirname, 'files/package.json.hbs').into(configFile, { project })

        if (hasUI5) {
            for (const { app } of apps) {
                project.app = app
                await merge(__dirname, 'files/ui5.yaml.hbs').into(join(appPath, app, 'ui5.yaml'), { project })
            }
            for (const { app } of apps) {
                project.app = app
                await merge(__dirname, 'files/ui5-deploy.yaml.hbs').into(join(appPath, app, 'ui5-deploy.yaml'), { project })
            }
        }

        for (const { app } of apps) {
            project.app = app
            await merge(__dirname, 'files/app-package.json.hbs').into(join(appPath, app, 'package.json'), { project })
        }

        // app deployer requires a manifest.json
        await Promise.all(appUIPaths.map(p =>
            merge(__dirname, 'files/manifest.json')
              .into(join(appPath, p, 'webapp/manifest.json'), { project })
        ))
    }

    async combine() {
        const project = readProject()
        const { isJava, srvPath, appPath, hasMta, hasMultitenancy, hasHelm, hasHelmUnifiedRuntime, hasApprouter, apps } = project

        await Promise.all(apps.map(async ({app}) => {
            project.app = app
            const additions = [odataApi]
            await merge(__dirname, 'files/xs-app.json.hbs').into(join(appPath, app, 'xs-app.json'), { with: project, additions })
        }))

        if (hasMultitenancy) {
            await merge(__dirname, 'files/package.sidecar.json').into('mtx/sidecar/package.json')
          }

        if (hasMta) {
            const srv = srv4(srvPath)
            project.apps = apps
            const appModules = project.apps.map(app => ( {
                in: 'modules',
                where: { type: 'html5', path: `${appPath}${app.app}` }
            }))
            const additions = [srv, appDeployer, html5RepoHost, ...appModules]
            const relationships = [{
                insert: [html5RepoHost, 'name'],
                into: [appDeployer, 'requires', 'name'],
            }]
            if (hasApprouter) {
                additions.push(approuter, html5Runtime)
                relationships.push({
                    insert: [html5Runtime, 'name'],
                    into: [approuter, 'requires', 'name'],
                })
            }
            if (hasMultitenancy) {
                relationships.push({
                    insert: [html5Runtime, 'name'],
                    into: [mtxSidecar4(isJava ? 'mtx/sidecar' : 'gen/mtx/sidecar'), 'requires', 'name']
                })
            }
            await merge(__dirname, 'files/mta.yaml.hbs').into('mta.yaml', { with: project,
                additions,
                relationships
            })
        }

        if (hasHelm || hasHelmUnifiedRuntime) {
            await merge(__dirname, 'files/values.yaml.hbs').into('chart/values.yaml', { with: project })
        }
    }
}
